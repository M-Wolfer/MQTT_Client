@page "/mqttpub"

@using System.ComponentModel
@using ViewModels
@inject IMQTTViewModel ViewModel;

@implements IDisposable

<h1>MQTT Client Publish</h1>

<h4>Idk @ViewModel.PublishMessage("d", "hallo" )</h4>
<p></p>
<p>
    <label>
        Topic: <tab></tab>
        <input @bind="ViewModel.Topic" />
    </label>
</p>
<p>
    <label>
        Message:
        <input @bind="ViewModel.Message" />
    </label>
</p>

<ul>
    <li><code>Message</code>: @ViewModel.Message</li>
    <li><code>Topic</code>: @ViewModel.Topic</li>
</ul>

<button class="btn btn-primary" @onclick="ViewModel.PublishMessage">Publish</button>

@code {
    //private string msg="msg", tpc="tpc";
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += async (sender, e) => {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    
    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}